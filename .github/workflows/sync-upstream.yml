name: Sync with Upstream

on:
  schedule:
    # Run daily at 10 AM UTC
    - cron: "0 10 * * *"
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write
  actions: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history for proper merging

      - name: Set up origin HEAD
        run: |
          # GitHub Actions doesn't always set origin/HEAD, so we need to set it manually
          git remote set-head origin -a

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/basecamp/omarchy.git
          echo "Fetching upstream..."
          git fetch upstream
          echo "Upstream branches:"
          git branch -r | grep upstream/ || echo "No upstream branches found"

      - name: Get default branch
        id: default_branch
        run: |
          # First try to get the default branch from the local repository
          if git symbolic-ref refs/remotes/origin/HEAD >/dev/null 2>&1; then
            DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
          else
            # If that fails, query GitHub API to get the default branch
            DEFAULT_BRANCH=$(git ls-remote --symref origin HEAD | awk '/^ref:/ {sub(/refs\/heads\//, "", $2); print $2}')
          fi

          # If still empty, fallback to common defaults
          if [ -z "$DEFAULT_BRANCH" ]; then
            if git show-ref --verify --quiet refs/remotes/origin/main; then
              DEFAULT_BRANCH="main"
            elif git show-ref --verify --quiet refs/remotes/origin/master; then
              DEFAULT_BRANCH="master"
            else
              echo "Error: Could not determine default branch"
              exit 1
            fi
          fi

          echo "Detected default branch: $DEFAULT_BRANCH"
          echo "name=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Check for upstream changes
        id: check_changes
        run: |
          DEFAULT_BRANCH="${{ steps.default_branch.outputs.name }}"

          # Verify upstream branch exists
          if ! git show-ref --verify --quiet "refs/remotes/upstream/$DEFAULT_BRANCH"; then
            echo "Error: Upstream branch 'upstream/$DEFAULT_BRANCH' not found"
            echo "Available upstream branches:"
            git branch -r | grep upstream/
            exit 1
          fi

          # Check if there are any new commits in upstream
          UPSTREAM_COMMITS=$(git rev-list HEAD..upstream/$DEFAULT_BRANCH --count 2>/dev/null || echo "0")

          if [ "$UPSTREAM_COMMITS" -eq 0 ]; then
            echo "No new changes from upstream"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Found $UPSTREAM_COMMITS new commits from upstream"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commit_count=$UPSTREAM_COMMITS" >> $GITHUB_OUTPUT

            # Check if we have diverged from upstream (i.e., we have commits that upstream doesn't)
            LOCAL_COMMITS=$(git rev-list upstream/$DEFAULT_BRANCH..HEAD --count 2>/dev/null || echo "0")
            echo "Found $LOCAL_COMMITS local commits ahead of upstream"
            echo "local_commits=$LOCAL_COMMITS" >> $GITHUB_OUTPUT

            # Determine if this is a simple fast-forward or a real merge
            if [ "$LOCAL_COMMITS" -eq 0 ]; then
              echo "This will be a fast-forward merge (no local changes)"
              echo "is_fast_forward=true" >> $GITHUB_OUTPUT
            else
              echo "This will be a merge (local changes present)"
              echo "is_fast_forward=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Merge upstream changes
        if: steps.check_changes.outputs.has_changes == 'true'
        id: merge
        run: |
          # Try to merge upstream changes and detect actual conflicts
          if git merge upstream/${{ steps.default_branch.outputs.name }} --no-edit; then
            # Check if there were any conflict markers in the merge
            if git diff --check HEAD~1 HEAD 2>/dev/null; then
              echo "Merge successful without conflicts"
              echo "has_conflicts=false" >> $GITHUB_OUTPUT
            else
              echo "Merge completed but may have had conflicts that were auto-resolved"
              echo "has_conflicts=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Merge failed due to conflicts"
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            # Stage all files including conflicts
            git add -A
            git commit -m "Merge upstream changes from basecamp/omarchy (with conflicts)"
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          branch: sync-upstream
          title: "Sync with upstream basecamp/omarchy"
          body: |
            This PR syncs changes from the upstream repository [basecamp/omarchy](https://github.com/basecamp/omarchy).

            ## ${{ steps.check_changes.outputs.is_fast_forward == 'true' && '‚ö° Fast-forward Update' || (steps.merge.outputs.has_conflicts == 'true' && '‚ö†Ô∏è Merge Conflicts' || 'üîÄ Clean Merge') }}

            ${{ steps.check_changes.outputs.is_fast_forward == 'true' && 'This is a simple fast-forward update with no local changes to merge.' || (steps.merge.outputs.has_conflicts == 'true' && 'This PR contains merge conflicts that need to be resolved manually before merging.' || 'Local changes merged cleanly with upstream changes.') }}

            ## Changes

            This PR includes ${{ steps.check_changes.outputs.commit_count }} new commits from upstream's `${{ steps.default_branch.outputs.name }}` branch.
            ${{ steps.check_changes.outputs.is_fast_forward == 'false' && format('Additionally, there are {0} local commits that will be preserved.', steps.check_changes.outputs.local_commits) || '' }}

            ## Next Steps

            ${{ steps.merge.outputs.has_conflicts == 'true' && '1. Resolve the merge conflicts
            2. Review the changes
            3. Remove draft status when ready
            4. Merge when all checks pass' || '1. Review the changes
            2. Ensure all tests pass
            3. Merge when ready' }}

            ---
            *This PR was automatically created by the sync-upstream workflow.*
          draft: ${{ steps.merge.outputs.has_conflicts == 'true' }}
          delete-branch: true
